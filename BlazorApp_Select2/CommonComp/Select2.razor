@typeparam T
@inject IJSRuntime _js

<select id="@id" @bind="Selected_Value" class="form-control">
    <option value=""> -- أختر -- </option>
    @if (DataList != null)
    {
        @foreach (var item in DataList)
        {
            <option value="@item.ID">@item.Text</option>
        }
    }
</select>

@code {
    [Parameter]
    public T Selected_Value { get; set; }
    [Parameter]
    public List<Data_SelectOptions> DataList { get; set; } = new List<Data_SelectOptions>();
    [Parameter]
    public EventCallback<T> Selected_ValueChanged { get; set; }

    private string id;

    protected override async Task OnInitializedAsync()
    {
        id = "id" + Guid.NewGuid().ToString();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _js.InvokeVoidAsync("initializeSelect2WithChangeEvent", id, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnSelect2Change(string? selectedValue)
    {
        if (string.IsNullOrEmpty(selectedValue))
        {
            Selected_Value = default(T);
        }
        else
        {
            if (typeof(T) == typeof(int?))
            {
                Selected_Value = (T)(object)(int.TryParse(selectedValue, out var intValue) ? (int?)intValue : null);
            }
            else if (typeof(T) == typeof(long?))
            {
                Selected_Value = (T)(object)(long.TryParse(selectedValue, out var longValue) ? (long?)longValue : null);
            }
            else if (typeof(T) == typeof(decimal?))
            {
                Selected_Value = (T)(object)(decimal.TryParse(selectedValue, out var decimalValue) ? (decimal?)decimalValue : null);
            }
            else
            {
                Selected_Value = (T)Convert.ChangeType(selectedValue, typeof(T));
            }
        }

        Selected_ValueChanged.InvokeAsync(Selected_Value);
        InvokeAsync(() => StateHasChanged());
    }
}
